Initial memory usage:

Partition of a set of 31824 objects. Total size = 2078820 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0  11626  37   719364  35    719364  35 str
     1   6054  19   246244  12    965608  46 tuple
     2    333   1   170652   8   1136260  55 dict (no owner)
     3     83   0   114916   6   1251176  60 dict of module
     4    217   1   113900   5   1365076  66 dict of type
     5   1668   5   113424   5   1478500  71 types.CodeType
     6    220   1    98132   5   1576632  76 type
     7   1581   5    94860   5   1671492  80 function
     8   5899  19    70788   3   1742280  84 int
     9    127   0    68468   3   1810748  87 dict of class
<93 more rows. Type e.g. '_.more' to view.>

Creating 100 dicts with 5000 objects:
Creating 100 Cython cBinaryTrees with 5000 objects:
Creating 100 Cython cAVLTrees with 5000 objects:
Creating 100 Cython cRBTrees with 5000 objects:

Creating 100 Python BinaryTrees with 5000 objects:
Creating 100 Python AVLTrees with 5000 objects:
Creating 100 Python RBTrees with 5000 objects:

Partition of a set of 3033153 objects. Total size = 145995292 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0 500000  16 24000000  16  24000000  16 bintrees.cavltree.Node
     1 500000  16 24000000  16  48000000  33 bintrees.crbtree.Node
     2 500000  16 22000000  15  70000000  48 bintrees.avltree.Node
     3 500000  16 22000000  15  92000000  63 bintrees.cbintree.Node
     4 500000  16 22000000  15 114000000  78 bintrees.rbtree.Node
     5 500000  16 20000000  14 134000000  92 bintrees.bintree.Node
     6    439   0 10015892   7 144015892  99 dict (no owner)
     7  11628   0   719460   0 144735352  99 str
     8   6053   0   246212   0 144981564  99 tuple
     9     83   0   114916   0 145096480  99 dict of module
<108 more rows. Type e.g. '_.more' to view.>